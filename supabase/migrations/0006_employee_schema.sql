-- Tipe data untuk peran karyawan
CREATE TYPE employee_role AS ENUM ('Admin', 'Manajer Farm', 'Operator Kandang');

-- Tabel untuk menyimpan data karyawan dan undangan
CREATE TABLE employees (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id) ON DELETE SET NULL,
    email TEXT NOT NULL UNIQUE,
    role employee_role NOT NULL,
    status TEXT NOT NULL DEFAULT 'INVITED',
    full_name TEXT,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    invited_by UUID REFERENCES auth.users(id)
);

-- Aktifkan Row Level Security
ALTER TABLE employees ENABLE ROW LEVEL SECURITY;

-- Kebijakan RLS: Hanya pengguna terautentikasi yang bisa melihat data karyawan
CREATE POLICY "Authenticated users can view employees"
ON employees
FOR SELECT
USING (auth.role() = 'authenticated');

-- Kebijakan RLS: Hanya pengguna terautentikasi yang bisa menambahkan karyawan (mengundang)
CREATE POLICY "Authenticated users can invite employees"
ON employees
FOR INSERT
WITH CHECK (auth.role() = 'authenticated');

-- Kebijakan RLS: Admin bisa mengupdate data karyawan
-- (Untuk saat ini, kita asumsikan semua user bisa mengupdate, bisa diperketat nanti)
CREATE POLICY "Users can update their own employee info"
ON employees
FOR UPDATE
USING (auth.uid() = user_id);

-- Kebijakan RLS: Admin bisa menghapus undangan
CREATE POLICY "Admin can delete employee invitations"
ON employees
FOR DELETE
USING (auth.role() = 'authenticated'); -- Bisa diperketat ke peran 'Admin' nanti